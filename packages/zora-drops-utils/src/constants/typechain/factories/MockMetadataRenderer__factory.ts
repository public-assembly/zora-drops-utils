/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type {
  MockMetadataRenderer,
  MockMetadataRendererInterface,
} from '../MockMetadataRenderer'

const _abi = [
  {
    inputs: [],
    name: 'contractURI',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'initData',
        type: 'bytes',
      },
    ],
    name: 'initializeWithData',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'tokenURI',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b50610320806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063856a7ffa14610046578063c87b56dd1461005b578063e8a3d485146100b7575b600080fd5b61005961005436600461018f565b6100f0565b005b6100a161006936600461025e565b5060408051808201909152600481527f44454d4f00000000000000000000000000000000000000000000000000000000602082015290565b6040516100ae9190610277565b60405180910390f35b60408051808201909152600481527f44454d4f0000000000000000000000000000000000000000000000000000000060208201526100a1565b80511561015d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f6e6f74207a65726f000000000000000000000000000000000000000000000000604482015260640160405180910390fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156101a157600080fd5b813567ffffffffffffffff808211156101b957600080fd5b818401915084601f8301126101cd57600080fd5b8135818111156101df576101df610160565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561022557610225610160565b8160405282815287602084870101111561023e57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561027057600080fd5b5035919050565b600060208083528351808285015260005b818110156102a457858101830151858201604001528201610288565b818111156102b6576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201604001939250505056fea264697066735822122027fa65f00ca6155ba402ed60efb4fa7116cf9b3ecff27a4b50305ea55a86e25b64736f6c634300080a0033'

type MockMetadataRendererConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: MockMetadataRendererConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class MockMetadataRenderer__factory extends ContractFactory {
  constructor(...args: MockMetadataRendererConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockMetadataRenderer> {
    return super.deploy(overrides || {}) as Promise<MockMetadataRenderer>
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): MockMetadataRenderer {
    return super.attach(address) as MockMetadataRenderer
  }
  override connect(signer: Signer): MockMetadataRenderer__factory {
    return super.connect(signer) as MockMetadataRenderer__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): MockMetadataRendererInterface {
    return new utils.Interface(_abi) as MockMetadataRendererInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockMetadataRenderer {
    return new Contract(address, _abi, signerOrProvider) as MockMetadataRenderer
  }
}
