/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { FundsReceiver, FundsReceiverInterface } from '../FundsReceiver'

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'source',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'FundsReceived',
    type: 'event',
  },
  {
    stateMutability: 'payable',
    type: 'receive',
  },
]

const _bytecode =
  '0x6080604052348015600f57600080fd5b50607a8061001e6000396000f3fe608060405236603f5760405134815233907f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f9060200160405180910390a2005b600080fdfea26469706673582212202579a15e03779f446e9072cbc6413de27858958ee43e7ed9e58df7d7974a625b64736f6c634300080a0033'

type FundsReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: FundsReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class FundsReceiver__factory extends ContractFactory {
  constructor(...args: FundsReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundsReceiver> {
    return super.deploy(overrides || {}) as Promise<FundsReceiver>
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): FundsReceiver {
    return super.attach(address) as FundsReceiver
  }
  override connect(signer: Signer): FundsReceiver__factory {
    return super.connect(signer) as FundsReceiver__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): FundsReceiverInterface {
    return new utils.Interface(_abi) as FundsReceiverInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FundsReceiver {
    return new Contract(address, _abi, signerOrProvider) as FundsReceiver
  }
}
